{"remainingRequest":"/Users/josemanuel/TFG/ProyectoGitHub/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/josemanuel/TFG/ProyectoGitHub/node_modules/bergben-angular2-file-drop/dist/src/file-drop.directive.js","dependencies":[{"path":"/Users/josemanuel/TFG/ProyectoGitHub/node_modules/bergben-angular2-file-drop/dist/src/file-drop.directive.js","mtime":1487600155000},{"path":"/Users/josemanuel/TFG/ProyectoGitHub/node_modules/cache-loader/dist/cjs.js","mtime":1530554773771},{"path":"/Users/josemanuel/TFG/ProyectoGitHub/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["import { __decorate } from \"tslib\";\nimport { __metadata } from \"tslib\";\nimport 'fileapi';\nimport { Directive, EventEmitter, ElementRef, HostListener, Input, Output, } from '@angular/core';\nvar FileDropDirective = /*@__PURE__*/ (function () {\n    function FileDropDirective(element) {\n        this.fileOver = new EventEmitter();\n        this.onFileDrop = new EventEmitter();\n        this.element = element;\n    }\n    FileDropDirective.prototype.onDragOver = function (event) {\n        var transfer = this.getDataTransfer(event);\n        if (!this.haveFiles(transfer.types)) {\n            return;\n        }\n        transfer.dropEffect = 'copy';\n        this.preventAndStop(event);\n        this.emitFileOver(true);\n    };\n    FileDropDirective.prototype.onDragLeave = function (event) {\n        if (event.currentTarget === this.element[0]) {\n            return;\n        }\n        this.preventAndStop(event);\n        this.emitFileOver(false);\n    };\n    FileDropDirective.prototype.onDrop = function (event) {\n        var transfer = this.getDataTransfer(event);\n        if (!transfer) {\n            return;\n        }\n        this.preventAndStop(event);\n        this.emitFileOver(false);\n        for (var i = 0; i < transfer.files.length; i++) {\n            this.readFile(transfer.files[i]);\n        }\n    };\n    FileDropDirective.prototype.readFile = function (file) {\n        var _this = this;\n        var strategy = this.pickStrategy();\n        if (!strategy) {\n            this.emitFileDrop(file);\n        }\n        else {\n            // XXX Waiting for angular/zone.js#358\n            var method = \"readAs\" + strategy;\n            FileAPI[method](file, function (event) {\n                if (event.type === 'load') {\n                    _this.emitFileDrop(event.result);\n                }\n                else if (event.type === 'error') {\n                    throw new Error(\"Couldn't read file '\" + file.name + \"'\");\n                }\n            });\n        }\n    };\n    FileDropDirective.prototype.emitFileOver = function (isOver) {\n        this.fileOver.emit(isOver);\n    };\n    FileDropDirective.prototype.emitFileDrop = function (file) {\n        this.onFileDrop.emit(file);\n    };\n    FileDropDirective.prototype.pickStrategy = function () {\n        if (!this.options) {\n            return;\n        }\n        if (this.hasStrategy(this.options.readAs)) {\n            return this.options.readAs;\n        }\n    };\n    FileDropDirective.prototype.hasStrategy = function (type) {\n        return [\n            'DataURL',\n            'BinaryString',\n            'ArrayBuffer',\n            'Text',\n        ].indexOf(type) !== -1;\n    };\n    FileDropDirective.prototype.getDataTransfer = function (event) {\n        return event.dataTransfer ? event.dataTransfer : event.originalEvent.dataTransfer;\n    };\n    FileDropDirective.prototype.preventAndStop = function (event) {\n        event.preventDefault();\n        event.stopPropagation();\n    };\n    FileDropDirective.prototype.haveFiles = function (types) {\n        if (!types) {\n            return false;\n        }\n        if (types.indexOf) {\n            return types.indexOf('Files') !== -1;\n        }\n        if (types.contains) {\n            return types.contains('Files');\n        }\n        return false;\n    };\n    return FileDropDirective;\n}());\nexport { FileDropDirective };\n//# sourceMappingURL=file-drop.directive.js.map\n",null]}