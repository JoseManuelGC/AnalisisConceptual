{"remainingRequest":"/Users/josemanuel/TFG/ProyectoGitHub/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/josemanuel/TFG/ProyectoGitHub/node_modules/ng2-file-input/dist/src/file-input-handler.service.js","dependencies":[{"path":"/Users/josemanuel/TFG/ProyectoGitHub/node_modules/ng2-file-input/dist/src/file-input-handler.service.js","mtime":1513642294000},{"path":"/Users/josemanuel/TFG/ProyectoGitHub/node_modules/cache-loader/dist/cjs.js","mtime":1530554773771},{"path":"/Users/josemanuel/TFG/ProyectoGitHub/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["import { Injectable } from '@angular/core';\nvar FileInputHandlerService = /*@__PURE__*/ (function () {\n    function FileInputHandlerService() {\n        this.fileInputs = [];\n    }\n    FileInputHandlerService.prototype.add = function (id) {\n        this.fileInputs.push({\n            id: id,\n            currentFiles: []\n        });\n        return true;\n    };\n    FileInputHandlerService.prototype.remove = function (id) {\n        for (var i = 0; this.fileInputs.length; i++) {\n            if (this.fileInputs[i].id === id) {\n                this.fileInputs.splice(i, 1);\n                i = this.fileInputs.length;\n                return true;\n            }\n        }\n        return false;\n    };\n    FileInputHandlerService.prototype.reset = function (id) {\n        var fileInput = this.getFileInput(id);\n        fileInput.currentFiles = [];\n        return true;\n    };\n    FileInputHandlerService.prototype.addFiles = function (fileInputId, files) {\n        var _this = this;\n        var fileInput = this.getFileInput(fileInputId);\n        var notAdded = [];\n        files.forEach(function (file) {\n            if (!_this.addFile(file, fileInput.currentFiles)) {\n                notAdded.push(file);\n            }\n        });\n        return notAdded;\n    };\n    FileInputHandlerService.prototype.removeFiles = function (fileInputId, files) {\n        var _this = this;\n        var fileInput = this.getFileInput(fileInputId);\n        var notRemoved = [];\n        files.forEach(function (file) {\n            if (!_this.removeFile(file, fileInput.currentFiles)) {\n                notRemoved.push(file);\n            }\n        });\n        return notRemoved;\n    };\n    FileInputHandlerService.prototype.getFileInput = function (id) {\n        for (var i = 0; this.fileInputs.length; i++) {\n            if (this.fileInputs[i].id === id) {\n                return this.fileInputs[i];\n            }\n        }\n    };\n    FileInputHandlerService.prototype.addFile = function (file, toFiles) {\n        toFiles.push(file);\n        return true;\n    };\n    FileInputHandlerService.prototype.removeFile = function (file, fromFiles) {\n        for (var i = 0; fromFiles.length; i++) {\n            if (this.isSameFile(file, fromFiles[i])) {\n                fromFiles.splice(i, 1);\n                i = fromFiles.length;\n                return true;\n            }\n        }\n        return false;\n    };\n    FileInputHandlerService.prototype.isSameFile = function (file1, file2) {\n        return file1.name === file2.name && file1.size === file2.size && file1.type === file2.type;\n    };\n    return FileInputHandlerService;\n}());\nexport { FileInputHandlerService };\n//# sourceMappingURL=file-input-handler.service.js.map\n",null]}