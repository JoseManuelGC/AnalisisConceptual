{"remainingRequest":"/Users/josemanuel/TFG/ProyectoGitHub/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/josemanuel/TFG/ProyectoGitHub/node_modules/ng2-file-input/dist/src/ng2-file-input.component.js","dependencies":[{"path":"/Users/josemanuel/TFG/ProyectoGitHub/node_modules/ng2-file-input/dist/src/ng2-file-input.component.js","mtime":1513642294000},{"path":"/Users/josemanuel/TFG/ProyectoGitHub/node_modules/cache-loader/dist/cjs.js","mtime":1530554773771},{"path":"/Users/josemanuel/TFG/ProyectoGitHub/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["import { FileInputHandlerService } from './file-input-handler.service';\nimport { Component, Input, Output, EventEmitter, Inject, forwardRef } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { Ng2FileInputOptions } from './ng2-file-input-options.class';\nimport { Ng2FileInputAction } from './ng2-file-input-action.enum';\nvar Ng2FileInputComponent = /*@__PURE__*/ (function () {\n    function Ng2FileInputComponent(fileInputHandlerService, sanitizer, defaultOptions) {\n        this.fileInputHandlerService = fileInputHandlerService;\n        this.sanitizer = sanitizer;\n        this.defaultOptions = defaultOptions;\n        this.alreadyEmitted = false;\n        this.fileIsOver = false;\n        this.invalidFile = false;\n        this.multiple = null;\n        this.removable = null;\n        this.showPreviews = null;\n        this.outputAction = new EventEmitter();\n        this.outputRemoved = new EventEmitter();\n        this.outputAdded = new EventEmitter();\n        this.outputInvalidDenied = new EventEmitter();\n        this.outputCouldNotRemove = new EventEmitter();\n        this.outputCouldNotAdd = new EventEmitter();\n    }\n    Ng2FileInputComponent.prototype.ngOnInit = function () {\n        this.dropText = this.dropText || this.defaultOptions.dropText;\n        this.browseText = this.browseText || this.defaultOptions.browseText;\n        this.removeText = this.removeText || this.defaultOptions.removeText;\n        this.invalidFileText = this.invalidFileText || this.defaultOptions.invalidFileText;\n        this.invalidFileTimeout = this.invalidFileTimeout || this.defaultOptions.invalidFileTimeout;\n        this.multiple = this.multiple !== null ? this.multiple : this.defaultOptions.multiple;\n        this.accept = this.accept !== null ? this.accept : this.defaultOptions.accept;\n        this.removable = this.removable !== null ? this.removable : this.defaultOptions.removable;\n        this.showPreviews = this.showPreviews !== null ? this.showPreviews : this.defaultOptions.showPreviews;\n        this.extensions = this.extensions || this.defaultOptions.extensions;\n        if (typeof (this.id) === \"undefined\" || !this.id || this.id === null) {\n            this.id = this.generateId();\n        }\n        this.fileInputHandlerService.add(this.id);\n    };\n    Ng2FileInputComponent.prototype.ngOnDestroy = function () {\n        this.fileInputHandlerService.remove(this.id);\n    };\n    Ng2FileInputComponent.prototype.fileOver = function (fileIsOver) {\n        this.fileIsOver = fileIsOver;\n    };\n    Ng2FileInputComponent.prototype.onFileDrop = function (file) {\n        var _this = this;\n        if (!this.multiple) {\n            //make sure only to emit once\n            if (!this.alreadyEmitted) {\n                this.alreadyEmitted = true;\n                this.handleFile(file);\n                setTimeout(function () { _this.alreadyEmitted = false; }, 0);\n            }\n        }\n        else {\n            this.handleFile(file);\n        }\n    };\n    Ng2FileInputComponent.prototype.fileSelected = function (event) {\n        this.invalidFile = false;\n        var files = event.target.files;\n        if (files && files.length) {\n            if (!this.multiple) {\n                //make sure only to emit one\n                this.handleFile(files[0]);\n            }\n            else {\n                for (var i = 0; i < files.length; i++) {\n                    this.handleFile(files[i]);\n                }\n            }\n        }\n        setTimeout(function () { event.target.value = \"\"; }, 0);\n    };\n    Ng2FileInputComponent.prototype.getCurrentFiles = function () {\n        var fileInput = this.fileInputHandlerService.getFileInput(this.id);\n        return fileInput ? fileInput.currentFiles : [];\n    };\n    Ng2FileInputComponent.prototype.removeFile = function (file) {\n        if (this.removable) {\n            var notRemovedFiles = this.fileInputHandlerService.removeFiles(this.id, [file]);\n            if (notRemovedFiles.length === 0) {\n                this.emitOutput(file, Ng2FileInputAction.Removed);\n            }\n            else {\n                this.emitOutput(file, Ng2FileInputAction.CouldNotRemove);\n            }\n        }\n    };\n    Ng2FileInputComponent.prototype.getObjectUrl = function (file) {\n        return this.sanitizer.bypassSecurityTrustResourceUrl(window.URL.createObjectURL(file));\n    };\n    Ng2FileInputComponent.prototype.handleFile = function (file) {\n        if (this.isValidFile(file)) {\n            if (!this.multiple) {\n                this.fileInputHandlerService.reset(this.id);\n            }\n            var notAddedFiles = this.fileInputHandlerService.addFiles(this.id, [file]);\n            if (notAddedFiles.length === 0) {\n                this.emitOutput(file, Ng2FileInputAction.Added);\n            }\n            else {\n                this.emitOutput(file, Ng2FileInputAction.CouldNotAdd);\n            }\n        }\n        else {\n            this.emitOutput(file, Ng2FileInputAction.InvalidDenied);\n        }\n    };\n    Ng2FileInputComponent.prototype.emitOutput = function (file, action) {\n        this.outputAction.emit({\n            id: this.id,\n            currentFiles: this.getCurrentFiles(),\n            action: action,\n            file: file\n        });\n        switch (action) {\n            case Ng2FileInputAction.Added:\n                this.outputAdded.emit({\n                    id: this.id,\n                    currentFiles: this.getCurrentFiles(),\n                    file: file\n                });\n                break;\n            case Ng2FileInputAction.Removed:\n                this.outputRemoved.emit({\n                    id: this.id,\n                    currentFiles: this.getCurrentFiles(),\n                    file: file\n                });\n                break;\n            case Ng2FileInputAction.InvalidDenied:\n                this.outputInvalidDenied.emit({\n                    id: this.id,\n                    currentFiles: this.getCurrentFiles(),\n                    file: file\n                });\n                break;\n            case Ng2FileInputAction.CouldNotAdd:\n                this.outputCouldNotAdd.emit({\n                    id: this.id,\n                    currentFiles: this.getCurrentFiles(),\n                    file: file\n                });\n                break;\n            case Ng2FileInputAction.CouldNotRemove:\n                this.outputCouldNotRemove.emit({\n                    id: this.id,\n                    currentFiles: this.getCurrentFiles(),\n                    file: file\n                });\n                break;\n        }\n    };\n    Ng2FileInputComponent.prototype.isValidFile = function (file) {\n        var _this = this;\n        if (this.extensions.length > 0) {\n            var ext = file.name.split('.').pop();\n            if ((this.extensions.indexOf('image/jpg') !== -1) && (this.extensions.indexOf('image/jpeg') === -1)) {\n                this.extensions.push('image/jpeg');\n            }\n            ;\n            if (this.extensions.indexOf(file.type) === -1 && this.extensions.indexOf(ext) === -1) {\n                this.invalidFile = true;\n                if (this.invalidFileTimeout !== 0) {\n                    setTimeout(function () {\n                        _this.invalidFile = false;\n                    }, this.invalidFileTimeout);\n                }\n                return false;\n            }\n        }\n        return true;\n    };\n    Ng2FileInputComponent.prototype.generateId = function () {\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n        });\n    };\n    return Ng2FileInputComponent;\n}());\nexport { Ng2FileInputComponent };\n//# sourceMappingURL=ng2-file-input.component.js.map\n",null]}